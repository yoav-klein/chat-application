/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package chat.server;

import java.util.Map;
import java.util.HashMap;

import java.io.IOException;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;

import chat.common.request.*;
import chat.common.exception.*;


public class Server {

    private static Map<Integer, User> idToUserMap = new HashMap<Integer, User>();
    private static Map<String, Integer> usernameToIdMap = new HashMap<String, Integer>();
    

    /* private static ClientMessage handleRequest(ClientMessage message, Communication comm) {
        // switch case type of request
    } */

    private static void registerUser(ClientMessage message) throws BadRequestException, IOException {
        ObjectMapper mapper = new ObjectMapper();
        ClientHelloRequest clientHello;
        try {
            clientHello = mapper.readValue(message.getMessage(), ClientHelloRequest.class);
        } catch(UnrecognizedPropertyException e) {
            throw new BadRequestException("Client hello message malformed");
        }
        System.out.println("Creating new user: " + clientHello.getUserName());
        User newUser = new User(clientHello.getUserName());
        idToUserMap.put(message.getUid(), newUser);
        usernameToIdMap.put(clientHello.getUserName(), message.getUid());
       
    }

    private static void start(Communication comm) throws IOException {
        while(true) {
            ClientMessage message;
            try {
                message = comm.run();
                int uid = message.getUid();

                if(!idToUserMap.containsKey(uid)) { // new user
                    try {
                        registerUser(message);
                        comm.sendMessageToClient(new ClientMessage(uid, "{\"status\":\"OK\"}"));

                    } catch(BadRequestException e) {
                        
                    }
                }

                System.out.println(message.getMessage());
                comm.sendMessageToClient(new ClientMessage(message.getUid(), "Yes, got the " + message.getMessage()));
                // ClientMessage response = handleRequest(message, comm);
                // comm.sendMessageToClient(response);
                

            } catch(ClosedConnectionException e) {
                int uid = e.getUid();
                String username = idToUserMap.get(uid).getName();
                idToUserMap.remove(uid);
                usernameToIdMap.remove(username);
            } 
        }
    }

    public static void main(String[] args) {
        try {
            Communication tcp = new Communication(8080);
            start(tcp);
        } catch(IOException e) {
            System.err.println(e);
        }
    }
}