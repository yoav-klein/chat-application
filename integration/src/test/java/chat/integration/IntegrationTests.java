/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package chat.integration;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestMethodOrder;

import com.fasterxml.jackson.databind.ObjectMapper;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.Order;

import chat.common.servermessage.ChatPayload;
import chat.common.servermessage.StatusPayload;
import chat.common.servermessage.StatusMessageType;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@TestMethodOrder(OrderAnnotation.class)
class IntegrationTests {
    ObjectMapper  mapper = new ObjectMapper();
    ServerThread serverThread;
    MockPerson avi;
    MockPerson benny;

    @BeforeAll
    void init() throws IOException {
        ServerThread server = new ServerThread(8080);
        server.run();

        MockPerson avi = new MockPerson("Avi");
        MockPerson benny = new MockPerson("Benny");
        
        this.avi = avi;
        this.benny = benny;
        
    }   


    @Test
    @Order(1) 
    void testLogin() {
        avi.logIn();
        benny.logIn();

        StatusPayload aviStatus = avi.getStatusPayload();
        StatusPayload bennyStatus = benny.getStatusPayload();

        assert(aviStatus.status == StatusMessageType.SUCCESS);
        assert(bennyStatus.status == StatusMessageType.SUCCESS);
    }     

    @Test
    @Order(2)
    void testSendMessageToUser() {
        Map<Integer, Object> values = new HashMap<>();
        values.put(0, "Avi");
        values.put(1, "Hey");

        benny.setRequest("Send a message to a user", values);

        StatusPayload bennyStatus = benny.getStatusPayload();
        assert(bennyStatus.status == StatusMessageType.SUCCESS);

        ChatPayload aviChat = avi.getChatPayload();
        assert(aviChat.from.equals("Benny"));
        assert(aviChat.to.equals("Avi"));
        assert(aviChat.message.equals("Hey"));
    }

    @Test
    @Order(3)
    void testCreateGroup() {
        Map<Integer, Object> values = new HashMap<>();
        values.put(0, "Family");

        avi.setRequest("Create a group", values);

        StatusPayload aviStatus = avi.getStatusPayload();
        assert(aviStatus.status == StatusMessageType.SUCCESS);
    }

    @Test
    @Order(4)
    void testListUsersInGroup() {
        Map<Integer, Object> values = new HashMap<>();
        values.put(0, "Family");

        avi.setRequest("List users in a group", values);

        StatusPayload aviStatus = avi.getStatusPayload();
        assert(aviStatus.status == StatusMessageType.SUCCESS);
        String message = avi.getStatusPayload().message;
        
        ObjectMapper mapper = new ObjectMapper();
        List users = null;
        try {
            users = mapper.readValue(message, List.class);
        } catch (IOException e) {
            e.printStackTrace();
        }
        assert(users.size() == 1);
        assert(users.get(0).equals("Avi"));
    }
}
